# 아이템 57. 지역변수의 범위를 최소화하라

지역변수의 유효 범위를 최소로 줄이면 코드 가독성과 유지보수성이 높아지고 오류 가능성은 낮아진다.

## 1. 지역변수의 범위를 줄이는 가장 강력한 기법
-> 가장 처음 쓰일 때 선언하며, 거의 모든 지역변수는 선언과 동시에 초기화
-> 초기화 정보가 충분하지 않다면 충분해질 때까지 선언을 미뤄야 한다.
(try-catch 구문은 예외 : 변수를 초기화하는 과정에서 예외를 던질 수 있다면 try블록안에 선언)

## 2. 반복문을 이용하여 최소화
반복문이 끝나도 변수를 써야하는 상황이 아니라면 for문 추천

컬렉션이나 배열을 순회하는 권강 관용구
```java
for (Element e : c){
	...
}
```
반복자가 필요할 때의 관용구
```java
for (Iterator<Element> i = c.iterator(); i.hasNext(); ) {
	Element e = i.next();
    ...
}
```

while문 보다 for문이 더 나은 이유
```java
Iterator<Element> i = c.iterator();
while(i.hasNext()) {
	doSomething(i.next());

Iterator<Element> i2 = c.iterator();
while(i.hasNext()) {  // 오타로 인해 while문이 끝나버리는 버그 발생
	doSomething(i2.next());
```
프로그램 오류가 겉으로 드러나지 않으므로 오랜기간 발견되지 않을 수도 있다.

반면,
```java
for (Iterator<Element> i = c.iterator(); i.hasNext(); ) {
	Element e = i.next();
    ...
}
// 다음의 코드는 "i를 찾을 수 없다"는 컴파일 오류를 발생시킨다.
for (Iterator<Element> i2 = c.iterator(); i.hasNext(); ) {
	Element e = i2.next();;
    ...
}
```
구분자가 있는 for문일 경우 오류를 뱉기때문에 실수를 하여도 쉽게 알아차릴 수 있다.
->변수 유효범위가 for문의 범위와 일치하여 범위를 줄여주기도 한다.

또한,
```java
for (int i = 0, n = expensiveComputation(); i < n; i++) {
  // i로 무언가를 한다.
}
```
다음과 같이 범위가 정확히 일치하는 두 반복변수 i와 값비싼 비교값 n은 초기에 초기화를 한번만 진행하여 반복 때마다 다시 계산해야 하는 비용을 없앴다.

## 3. 메서드를 작게 유지하고 한가지 기능에 집중하기
-> 단순히 메서드를 기능별로 쪼개어 지역변수를 생성한다면 지역변수를 최소화 할 수 있다.


## 요약
1. 지역변수는 가장 처음 쓰일 때 선언하며 바로 초기화를 진행하자
2. 반복문 내부에서만 사용할거라면 for문을 이용하여 최소화하자
3. 메서드를 작게 유지하고 한가지 기능에 집중하자