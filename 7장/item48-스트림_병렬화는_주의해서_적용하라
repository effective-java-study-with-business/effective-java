# 아이템 48. 스트림 병렬화는 주의해서 적용하라

자바 8부터 parallel 메서드만 한 번 호출하면 파이프라인을 병렬 실행할 수 있는 스트림을 지원했다.
동시성 프로그램의 작성법이 점점 쉬워지고있지만 "안정성"과 "응답 가능 상태"를 유지하기위해 애써야 한다.

## 동시성 프로그래밍의 주의점

20개의 메르센 소수(2의 n승 빼기 1로 표현되는 소수를 말한다.)를 생성하는 프로그램 
```java
public static void main(String[] args) {
    primes().map(p -> TWO.pow(p.intValueExact()).subtract(ONE))
            .filter(mersenne -> mersenne.isProbablePrime(50))
            .limit(20)
            .forEach(System.out::println);
}

static Stream<BigInteger> primes() {
    return Stream.iterate(TWO, BigInteger::nextProbablePrime);
}
```
단순 속도를 높이고 싶어 parallel()을 호출하게 되면 CPU 90%를 잡어먹는 상태가 무한히 계속되며, 아무것도 출력하지 못한다.
-> 스트림 라이브러리가 파이프라인 병렬화 방법을 찾아내지 못했기 때문이다.

데이터 소스가 Stream.iterate거나 중간 연산으로 limit를 쓰면 파이프라인 병렬화로는 성능 개선을 기대할 수 없다.

그리고 이 코드는 메르센 소수를 찾을 때마다 그 전 소수를 찾을 때보다 두 배 정도 더 오래 걸린다.
-> 원소 하나를 계산하는 비용이 대략 그 이전까지의 원소 전부를 계산한 비용을 합친 것만큼 들기 때문이다.
(각각의 소수에 대해 isProbablePrime 메서드를 호출할 때마다 확률론적인 알고리즘을 사용하며, 이때 매번 모든 이전 소수를 다시 검증해야 하므로, 계산 비용이 누적됩니다.) 

그러므로, 이 파이프라인은 자동 병렬화 알고리즘이 제 기능을 못하게 마비시킨다.

## 병렬화 효과가 좋은 자료구조
ArrayList, HashMap, HashSet, ConcurrentHashMap의 인스턴스거나 배열, int 범위, long 범위일 때 병렬화의 효과가 가장 좋다.

### 정확성
이 자료구조들은 정확하고 손쉽게 나눌 수 있어서 일을 다수의 스레드에 분배하기에 좋다.

### 참조 지역성
이웃한 원소의 참조들이 메모리에 연속해서 저장되어 있다.
-> 메모리가 서로 떨어질 경우 스레드는 주 메모리에서 캐시 메모리로 전송되어 오기를 기다리며 대부분 시간을 멍하니 보낸다.(즉, 참조 지역성이 낮다.)
-> 참조지역성이 가장 뛰어난 자료구조는 기본 타입의 배열( 데이터 자체가 연속해서 저장되기 때문)

##  종단 연산의 병렬화 영향

### 적합한 종단 연산 -> 축소
파이프라인에서 만들어진 원소를 하나로 합치는 작업으로, 비교적 간단한 연산들이 적합하다.

- Stream의 reduce 메서드 중 하나, 혹은 min, max, count, sum같이 완성된 형태로 제공되는 메서드
- anyMatch, allMatch, noneMatch 처럼 조건에 맞으면 바로 반환하는 메서드

### 적합하지 않은 종단 연산 -> 가변축소
결과값을 가공하여 새로운 리스트로 추출하는 메서드는 합치는 부담이 크기 때문에 병렬화에 적합하지 않다.

- Stream의 collect 메서드

## 스트림 병렬화는 오직 성능 최적화 수단
반드시 변경 전후로 성능을 테스트하여 병렬화를 사용할 가치가 있는지 확인해야한다.(아이템67)
-> 이상적으로는 운영 시스템과 흡사한 환경에서 테스트

조건이 잘 갖춰지면 parallel 메서드 호출 하나로 거의 프로세서 코어 수에 비례하는 성능 향상을 만끽할 수 있다.

소수 계산 스트림 파이프라인 - 병렬화에 적합하다.
```java
static long pi(long n) {
   return LongStream.rangeClosed(2, n)
      .mapToObj(BigInterger::valueOf)
      .filter(i -> i.isProbablePrime(50))
      .count();
}
```
병렬화 버전
```java
static long pi(long n) {
   return LongStream.rangeClosed(2, n)
      .parallel()
      .mapToObj(BigInterger::valueOf)
      .filter(i -> i.isProbablePrime(50))
      .count();
}
```
쿼드코어 기준 위 코드로는 31초가 걸린 반면, 아래 코드는 9.2초로 3.37배 단축됐다.
(하지만 n이 크다면 레머의 공식이라는 더 효율적인 알고리즘이 있다. )

## 무작위 수들로 이뤄진 스트림을 병렬화 주의점

ThreadLocalRandom 혹은 Random 보다는 병렬화에 쓰이라고 만들어진 "SplittableRandom" 인스턴스를 이용하자.
->ThreadLocalRandom 는 단일 스레드에서 쓰고자 만들어짐(병렬도 가능하지만 느림)
->Random은 모든 연산을 동기화하기 때문에 병렬처리에 최악의 성능

## 요약
1. 성능이 빨라질거라는 확신없이 스트림 파이프라인 병렬화는 시도조차 하지 말라. 잘못 사용시 오작동, 성능 급저하 발생
2. 병렬화 판단이 나도 수정 후 코드 확인 및 운영 환경과 유사한 곳에서 성능지표를 관찰하라
3. 그 후 완전히 나아졌다고 결론 시 운영 반영
